/* test integer */

/*
test
*/

// test
//
any _a ;

integer i;
integer i2 ;
integer _test;
float f;
boolean b;
string s;
dictionary<string, string> d;
sequence<integer> q;


any _a := f;
integer i := 1;
integer i2:= 1;
integer _test := 3;
float f := 1.0;
boolean b := true;
string s := "the rain in spain";
dictionary<string, string> d := new dictionary<string,string>;
any _a = new dictionary<string,string>;
sequence<integer> q := [1,_b,test_identifier];



event NestedEvent
{
	any a;
}

event MyEvent
{
	integer i;
	float f;
	boolean b;
	string s;
	dictionary<string, string> d;
	sequence<integer> q;
	NestedEvent n;
}


//Event to trigger batch of processing
//
// shouldLog is obvious
// bareException determines whether the exception thrown
// is one with or without a value

event DoSetup {
	integer numRecvContexts;
	integer numSendContexts;
	integer numOfIterations;
	
	action init(integer a) {
	    return something;
	}
}

event SetupDone {
}

event ContextDone {
}

event DoBatch {
	integer numOfIterationsRemaining;
}

//I've seen things you people wouldn't believe
event TearsInTheRain{
}




   
monitor m
{
	import "myPlugin" as plugin;

	sequence<context> recCtxs := [];
	sequence<context> sendCtxs := [];
	integer evtReceived := 0;
	integer eventsPerIter := 10000;
	integer numSendContexts := 0;
	integer numRecvContexts := 0;
	integer iterations := 0;
	integer finishedContexts := 0;
	
	MyEvent me;
	any a := me;
	dictionary<string, any> d := new dictionary<string, any>;
		
	//onload await external prompting.
	//use the batch channel 
    action onload(){
        monitor.subscribe("batch");

        me := MyEvent(42, 3.14, true, "hello", {"key":"value"}, [1,2,3,4], NestedEvent(678));

        sequence<string> fields := me.getFieldNames();
        string s;
        for s in fields {
            d[s] := a.getField(s);
        }

        on all DoSetup() as details  {
            doSetup( details );
        }
        
        on StockTick(*,*) processTick();
        
        on StockTick(*,*):newTick processTick();
        
        on StockTick(*,*) as newTick {
              processTick(newTick);
        }
        
        listener l := on StockTick(*,*) as newTick processTick();
        
        on SetupDone() {
            setupDone();
        }

        on all ContextDone() {
            contextDone();
        }

        on all TearsInTheRain()  {
            timeToDie();
        }
    }
	action contextDone(){
		finishedContexts := finishedContexts +1;
		if( finishedContexts = numRecvContexts ){
			enqueue TearsInTheRain() to context.current();
		}

	}

	//Termination action
	action timeToDie(){
		log "Test Finished" at INFO;
	}

	//Handle a batch, process a subset of the iterations required
	//and then if not finished send a DoBatch event for the remainder
	action doSetup( DoSetup details ){

		integer i := 0;
		recCtxs := []; //clear it 
		sendCtxs := []; //clear it 
		numRecvContexts := details.numRecvContexts;
		numSendContexts := details.numSendContexts;
		iterations := details.numOfIterations;

		//Setup the recieve contexts
		while(i < numRecvContexts) {
			context c := context("Recv"+i.toString());
			recCtxs.append(c);
			log "created receiveEvents to context " + c.toString() at INFO;
			i := i + 1;
		}

		//Set up the send contexts
		i := 0;
		while(i < numSendContexts) {
			context c := context("Send"+i.toString());
			sendCtxs.append(c);
			log "created sendEvents to context " + c.toString()at INFO;
			i := i + 1;
		}			

		send SetupDone() to "batch"; 

	}

	//We have setup the contexts to rec/send on
	action setupDone(){
		integer i := 0; 
		context c;
		//Setup the recieve handlers
		for c in recCtxs {
			log "spawned receiveEvents to context " + c.toString() at INFO;
			spawn receiveEvents(context.current()) to c;
			i := i + 1;
		}

		//Setup the recieve handlers
		for c in sendCtxs {
			log "spawned sendEvents to context " + c.toString() at INFO;
			spawn sendEvents() to c;
			send DoBatch(iterations) to c;
			i := i + 1;
		}

		//This will trigger sending in the test run.py 
		log "Setup Finished" at INFO;
	}

	
	//Do the work of receiving
	action receiveEvents(context main)
	{
		monitor.subscribe("channame");


		on all MyEvent() as re {
			//log "Received Event" + re.toString() at INFO;
			//when received all expected events 
			evtReceived := evtReceived + 1;
			if evtReceived % eventsPerIter = 0 {
				log (iterations-evtReceived).toString()+" events remaining on context " + context.current().getName() at INFO;
			}
			if (evtReceived >= iterations)
			{
				log "Context COMPLETE " + context.current().toString() + " received " + evtReceived.toString() + " events" at INFO;
				enqueue ContextDone() to main;
				die;
			}	
		}
	}


	action sendEvents()
	{
		
		on all DoBatch() as details  {
			doBatch( details );
		}
	}

	//Handle a batch, process a subset of the iterations required
	//and then if not finished send a DoBatch event for the remainder
	action doBatch( DoBatch details ){
		log "doBatch " + details.toString() at INFO;

		//Do a batch
		integer i := eventsPerIter;
		boolean last := false;

		//test for less than a batch and trigger final processing
		//if we are on the remaining < 1k iterations
		if( details.numOfIterationsRemaining < eventsPerIter ){
			log "less than 1k iterations" at INFO;
			i := details.numOfIterationsRemaining;
			last := true;
		}
		//next batch -1k or remainder
		integer nextIterations := details.numOfIterationsRemaining - i;

		while(i> 0) {
			plugin.sendEventChannelDict("channame", "MyEvent", d);
			i := i-1;
		}

		//If we have finished issue the trigger for the test
		if( last = true ){
			string message;
			message := "Batch Finished on " + context.current().toString() ;
			log message at INFO;
			//done
			return;
		}

		//Send the next batch 
		DoBatch nextBatch := DoBatch(nextIterations);
		send nextBatch to context.current();
	}

}
