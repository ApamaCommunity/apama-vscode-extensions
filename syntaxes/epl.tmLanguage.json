{
	"scopeName": "source.epl",
	"firstLineMatch": "(?x)\n# Hashbang\n^\\#!.*(?:\\s|\\/|(?<=!)\\b)\n  (?:node|iojs|JavaScript)\n(?:$|\\s)\n|\n# Modeline\n(?i:\n  # Emacs\n  -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)\n    (?:js|javascript)\n  (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-\n  |\n  # Vim\n  (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=\n    javascript\n  (?=\\s|:|$)\n)",
	"name": "Apama EPL",
	"patterns": [
		{
			"begin": "(?<!\\.)\\b(import)(?!\\s*[:(])\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.epl"
				}
			},
			"end": "(?=;|$)",
			"name": "meta.import.epl",
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.modules.begin.epl"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.modules.end.epl"
						}
					},
					"patterns": [
						{
							"match": "as",
							"name": "keyword.control.epl"
						},
						{
							"include": "#comments"
						},
						{
							"match": "\\b([a-zA-Z_$][\\w$]*)\\b",
							"name": "variable.other.module.epl"
						}
					]
				},
				{
					"include": "#strings"
				},
				{
					"include": "#comments"
				},
				{
					"match": "\\b(as)\\b",
					"name": "keyword.control.epl"
				},
				{
					"match": "\\b([a-zA-Z_$][\\w$]*)\\b(?=.*\\bas\\b)",
					"name": "variable.other.module.epl"
				}
			]
		},
		{
			"match": "(?:(?<=\\.{3})|(?<!\\.)\\b)(?<!\\$)(super|this|arguments)(?!\\s*:|\\$)\\b",
			"name": "variable.language.epl"
		},
		{
			"begin": "(?=\\baction\\b(?!\\s*))",
			"end": "(?<=})",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function_body"
				},
				{
					"begin": "\\G",
					"end": "(?<=\\))",
					"name": "meta.function.epl",
					"patterns": [
						{
							"include": "#function_innards"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(\\.)?[a-zA-Z_$][\\w$]*\\s*:=\\s*\\baction\\b)",
			"end": "(?<=})",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function_body"
				},
				{
					"begin": "\\G",
					"end": "(?!\\G)(?<=\\))",
					"name": "meta.function.epl",
					"patterns": [
						{
							"match": "(\\.)?([a-zA-Z_$][\\w$]*)\\s*(:=)\\s*",
							"captures": {
								"1": {
									"name": "meta.delimiter.method.period.epl"
								},
								"2": {
									"name": "entity.name.function.epl"
								},
								"3": {
									"name": "keyword.operator.assignment.epl"
								}
							}
						},
						{
							"include": "#function_innards"
						}
					]
				}
			]
		},
		{
			"begin": "(?=\\b[a-zA-Z_$][\\w$]*\\s*:=\\s*\\baction\\b)",
			"end": "(?<=})",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function_body"
				},
				{
					"begin": "\\G",
					"end": "(?<=\\))",
					"name": "meta.function.eplon.epl",
					"patterns": [
						{
							"match": "\\b([a-zA-Z_$][\\w$]*)\\s*(:=)\\s*",
							"captures": {
								"1": {
									"name": "entity.name.function.epl"
								},
								"2": {
									"name": "keyword.operator.assignment.epl"
								}
							}
						},
						{
							"include": "#function_innards"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(('[^']*?')|(\"[^\"]*?\"))\\s*:=\\s*\\baction\\b)",
			"end": "(?<=})",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function_body"
				},
				{
					"begin": "\\G",
					"end": "(?<=\\))",
					"name": "meta.function.eplon.epl",
					"patterns": [
						{
							"match": "(?:((')([^']*?)('))|((\")([^\"]*?)(\")))\\s*(:=)",
							"captures": {
								"1": {
									"name": "string.quoted.single.epl"
								},
								"2": {
									"name": "punctuation.definition.string.begin.epl"
								},
								"3": {
									"name": "entity.name.function.epl"
								},
								"4": {
									"name": "punctuation.definition.string.end.epl"
								},
								"5": {
									"name": "string.quoted.double.epl"
								},
								"6": {
									"name": "punctuation.definition.string.begin.epl"
								},
								"7": {
									"name": "entity.name.function.epl"
								},
								"8": {
									"name": "punctuation.definition.string.end.epl"
								},
								"9": {
									"name": "keyword.operator.assignment.epl"
								}
							}
						},
						{
							"include": "#function_innards"
						}
					]
				}
			]
		},
		{
			"begin": "(?x)\n(?=\n  (?!\n    (select|wait|within|break|case|catch|continue|do|else|finally|for|at|on|all|as|route|log|action|if|\n    package|return|switch|throw|try|while|with)\n    [\\s\\(]\n  )\n  (\n    \\b(get|set)            # Property getter/setter: get foo(){}\n    (?:\\s+|(?=\\[))        # Followed by whitespace or square bracket\n  )?+\n  (                         # Method name\n    \\b[a-zA-Z_$][\\w$]*    # Fixed name\n    |\n    \\[                     # Computed property key\n      [^\\[\\]]++           # Contains at least one non-brace character\n    \\]\n  )\n  \\s*\\(\\s*               # Start of arguments list\n    (\n      \"[^\"]*\"  |            # Double-quoted string\n      '[^']*'  |            # Single-quoted string\n       [^\"()']              # Any non-bracket or non-quote\n    )*\n  \\)\\s*                   # End of arguments\n  {                         # Beginning of body\n)",
			"end": "(?<=})",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function_body"
				},
				{
					"begin": "\\G",
					"end": "(?<=\\))",
					"name": "meta.function.method.definition.epl",
					"patterns": [
						{
							"match": "(\\[)(.+)(\\])(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "punctuation.definition.computed-key.begin.bracket.square.epl"
								},
								"2": {
									"patterns": [
										{
											"include": "$self"
										},
										{
											"match": "[a-zA-Z_$][\\w$]*",
											"name": "variable.parameter.property.epl"
										}
									]
								},
								"3": {
									"name": "punctuation.definition.computed-key.end.bracket.square.epl"
								}
							},
							"name": "meta.computed-key.epl"
						},
						{
							"match": "\\b([a-zA-Z_$][\\w$]*)",
							"name": "entity.name.function.epl"
						},
						{
							"include": "#function_params"
						}
					]
				}
			]
		},
		{
			"begin": "(?x)\n(?=\n  (?<![A-Za-z0-9])\n  ((\\(([^\\(\\)]*)?\\))|[\\w$]+)\n  \\s*=>\n)",
			"end": "(?x)\n(?<=})|\n((?!\n  \\s*{|\n  \\G\\(|\n  \\G[\\w$]+|\n  \\s*/\\*|\\s*//\n)(?=\\s*\\S))",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function_body"
				},
				{
					"begin": "\\G",
					"end": "(?<=(=>))",
					"name": "meta.function.arrow.epl",
					"patterns": [
						{
							"include": "#arrow_function_innards"
						}
					]
				}
			]
		},
		{
			"begin": "(?x)\n(?=\n  (\\.)?[a-zA-Z_$][\\w$]*\n  \\s*(=)\\s*\n  ((\\(([^\\(\\)]*)?\\))|[\\w$]+)\n  \\s*=>\n)",
			"end": "(?x)\n(?<=})|\n((?!\n  \\s*{|\n  \\G(\\.)?[a-zA-Z_$][\\w$]*\\s*(=)\\s*\\(|\n  \\G(\\.)?[a-zA-Z_$][\\w$]*\\s*(=)\\s*[\\w$]+|\n  \\s*/\\*|\\s*//\n)(?=\\s*\\S))",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function_body"
				},
				{
					"begin": "\\G",
					"end": "(?<=(=>))",
					"name": "meta.function.arrow.epl",
					"patterns": [
						{
							"match": "\\G(\\.)?([a-zA-Z_$][\\w$]*)\\s*(=)",
							"captures": {
								"1": {
									"name": "meta.delimiter.method.period.epl"
								},
								"2": {
									"name": "entity.name.function.epl"
								},
								"3": {
									"name": "keyword.operator.assignment.epl"
								}
							}
						},
						{
							"include": "#arrow_function_innards"
						}
					]
				}
			]
		},
		{
			"begin": "(?x)\n(?=\n  \\b[a-zA-Z_$][\\w$]*\n  \\s*:\\s*\n  ((\\(([^\\(\\)]*)?\\))|[\\w$]+)\n  \\s*=>\n)",
			"end": "(?x)\n(?<=})|\n((?!\n  \\s*{|\n  \\G[\\w$]+\\s*:|\n  \\s*/\\*|\\s*//\n)(?=\\s*\\S))",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function_body"
				},
				{
					"begin": "\\G",
					"end": "(?<=(=>))",
					"name": "meta.function.arrow.eplon.epl",
					"patterns": [
						{
							"match": "\\b([a-zA-Z_$][\\w$]*)\\s*(:)\\s*",
							"captures": {
								"1": {
									"name": "entity.name.function.epl"
								},
								"2": {
									"name": "keyword.operator.assignment.epl"
								}
							}
						},
						{
							"include": "#arrow_function_innards"
						}
					]
				}
			]
		},
		{
			"begin": "(?x)\n(?=\n  (('[^']*?')|(\"[^\"]*?\"))\n  \\s*:\\s*\n  ((\\(([^\\(\\)]*)?\\))|[\\w$]+)\n  \\s*=>\n)",
			"end": "(?x)\n(?<=})|\n((?!\n  \\G(('[^']*?')|(\"[^\"]*?\"))|\n  \\s*{|\n  \\s*/\\*|\\s*//\n)(?=\\s*\\S))",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function_body"
				},
				{
					"begin": "\\G",
					"end": "(?<=(=>))",
					"name": "meta.function.arrow.eplon.epl",
					"patterns": [
						{
							"match": "(?:((')([^']*?)('))|((\")([^\"]*?)(\")))\\s*(:)",
							"captures": {
								"1": {
									"name": "string.quoted.single.epl"
								},
								"2": {
									"name": "punctuation.definition.string.begin.epl"
								},
								"3": {
									"name": "entity.name.function.epl"
								},
								"4": {
									"name": "punctuation.definition.string.end.epl"
								},
								"5": {
									"name": "string.quoted.double.epl"
								},
								"6": {
									"name": "punctuation.definition.string.begin.epl"
								},
								"7": {
									"name": "entity.name.function.epl"
								},
								"8": {
									"name": "punctuation.definition.string.end.epl"
								},
								"9": {
									"name": "keyword.operator.assignment.epl"
								}
							}
						},
						{
							"include": "#arrow_function_innards"
						}
					]
				}
			]
		},
		{
			"match": "(=>)",
			"captures": {
				"0": {
					"name": "meta.function.arrow.epl"
				},
				"1": {
					"name": "storage.type.function.arrow.epl"
				}
			}
		},
		{
			"match": "(?x)\n\\b(action|monitor|event)\n(?:\n  (?:\\s+(extends)\\s+([a-zA-Z_$][\\w$]*))\n  |\n  (?:\n    (?:\\s+([a-zA-Z_$][\\w$]*))\n    (?:\\s+(extends)\\s+([a-zA-Z_$][\\w$]*))?\n  )\n)",
			"captures": {
				"1": {
					"name": "storage.type.class.epl"
				},
				"2": {
					"name": "storage.modifier.epl"
				},
				"3": {
					"name": "entity.other.inherited-class.epl"
				},
				"4": {
					"name": "entity.name.type.class.epl"
				},
				"5": {
					"name": "storage.modifier.epl"
				},
				"6": {
					"name": "entity.other.inherited-class.epl"
				}
			},
			"name": "meta.class.epl"
		},
		{
			"match": "(new)\\s+([\\w$]+[\\w.$]*)",
			"name": "meta.class.instance.constructor.epl",
			"captures": {
				"1": {
					"name": "keyword.operator.new.epl"
				},
				"2": {
					"name": "entity.name.type.instance.epl",
					"patterns": [
						{
							"match": "\\.",
							"name": "meta.delimiter.property.period.epl"
						}
					]
				}
			}
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"match": "(<!--|-->)",
			"captures": {
				"0": {
					"name": "punctuation.definition.comment.html.epl"
				},
				"2": {
					"name": "punctuation.definition.comment.html.epl"
				}
			},
			"name": "comment.block.html.epl"
		},
		{
			"match": "(?<!\\.)\\b(action|monitor|event)(?!\\s*:)\\b",
			"name": "storage.type.epl"
		},
		{
			"match": "(?<!\\.)\\b(any|sequence|dictionary|integer|float|string|boolean)(?!\\s*:)\\b",
			"name": "storage.type.var.epl"
		},
		{
			"begin": "(?<!\\.)\\b(const)(?!\\s*:)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.const.epl"
				}
			},
			"end": "(\\bof\\b|\\bin\\b)|(;)|(=)|(?<![,{])\\n",
			"endCaptures": {
				"1": {
					"name": "keyword.operator.$1.epl"
				},
				"2": {
					"name": "punctuation.terminator.statement.epl"
				},
				"3": {
					"name": "keyword.operator.assignment.epl"
				}
			},
			"patterns": [
				{
					"match": "([$_a-zA-Z][$_a-zA-Z0-9]*)\\s*(:)\\s*([$_a-zA-Z][$_a-zA-Z0-9]*)?",
					"captures": {
						"2": {
							"name": "keyword.operator.assignment.epl"
						},
						"3": {
							"name": "constant.other.epl"
						}
					}
				},
				{
					"match": "([$_a-zA-Z][$_a-zA-Z0-9]*)",
					"captures": {
						"1": {
							"name": "constant.other.epl"
						}
					}
				},
				{
					"match": "\\.\\.\\.",
					"name": "keyword.operator.spread.epl"
				},
				{
					"match": ",",
					"name": "meta.delimiter.object.comma.epl"
				},
				{
					"match": "\\(|\\)",
					"name": "meta.brace.round.epl"
				},
				{
					"match": "{|}",
					"name": "meta.brace.curly.epl"
				},
				{
					"match": "\\[|\\]",
					"name": "meta.brace.square.epl"
				},
				{
					"include": "#comments"
				}
			]
		},
		{
			"match": "(?<!\\.)\\b(await|break|catch|continue|do|else|finally|spawn|for|at|on|all|as|route|log|if|import|package|return|throw|try|while|with)(?!\\s*:)\\b",
			"name": "keyword.control.epl"
		},
		{
			"include": "#switch_statement"
		},
		{
			"match": "(?<!\\.)\\b(delete|in|of|instanceof|new|typeof|void)(?!\\s*:)\\b",
			"name": "keyword.operator.$1.epl"
		},
		{
			"match": "(?<!\\.)\\b(true|false)(?!\\s*:)\\b",
			"name": "constant.language.boolean.$1.epl"
		},
		{
			"begin": "(?<=[\\[=(?:+,!]|^|return|=>|&&|\\|\\|)\\s*(/)(?![/*+?])(?=.*/)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.string.begin.epl"
				}
			},
			"end": "(/)[gimuy]*",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.epl"
				}
			},
			"name": "string.regexp.epl",
			"patterns": [
				{
					"include": "source.epl.regexp"
				}
			]
		},
		{
			"begin": "\\?",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.ternary.epl"
				}
			},
			"end": ":",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.ternary.epl"
				}
			},
			"patterns": [
				{
					"include": "#prevent_object_keys_matching"
				},
				{
					"include": "$self"
				}
			]
		},
		{
			"include": "#operators"
		},
		{
			"include": "#method_calls"
		},
		{
			"include": "#function_calls"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#objects"
		},
		{
			"include": "#properties"
		},
		{
			"match": "((?<!\\.|[\\w$])(?![_\\$]+[^A-Z0-9_$])\\$*\\b(?:[A-Z_$][A-Z0-9_$]*)\\b\\$*)",
			"name": "constant.other.epl"
		},
		{
			"match": "(?<!\\$)\\b[0-9]+[\\w$]*",
			"name": "invalid.illegal.identifier.epl"
		},
		{
			"match": "\\;",
			"name": "punctuation.terminator.statement.epl"
		},
		{
			"match": ",",
			"name": "meta.delimiter.object.comma.epl"
		},
		{
			"match": "\\.",
			"name": "meta.delimiter.method.period.epl"
		},
		{
			"match": "({)(})",
			"captures": {
				"1": {
					"name": "punctuation.section.scope.begin.epl"
				},
				"2": {
					"name": "punctuation.section.scope.end.epl"
				}
			}
		},
		{
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.curly.epl"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "meta.brace.curly.epl"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.round.epl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.epl"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"match": "\\[|\\]",
			"name": "meta.brace.square.epl"
		},
		{
			"match": "\\A#!.*$",
			"name": "comment.line.shebang.epl"
		}
	],
	"repository": {
		"numbers": {
			"patterns": [
				{
					"match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)",
					"name": "constant.numeric.hex.epl"
				},
				{
					"match": "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)",
					"name": "constant.numeric.binary.epl"
				},
				{
					"match": "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)",
					"name": "constant.numeric.octal.epl"
				},
				{
					"match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)",
					"captures": {
						"0": {
							"name": "constant.numeric.decimal.epl"
						},
						"1": {
							"name": "meta.delimiter.decimal.period.epl"
						},
						"2": {
							"name": "meta.delimiter.decimal.period.epl"
						},
						"3": {
							"name": "meta.delimiter.decimal.period.epl"
						},
						"4": {
							"name": "meta.delimiter.decimal.period.epl"
						},
						"5": {
							"name": "meta.delimiter.decimal.period.epl"
						},
						"6": {
							"name": "meta.delimiter.decimal.period.epl"
						}
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
					"name": "keyword.operator.assignment.compound.epl"
				},
				{
					"match": "&=|\\^=|<<=|>>=|>>>=|\\|=",
					"name": "keyword.operator.assignment.compound.bitwise.epl"
				},
				{
					"match": "<<|>>>|>>",
					"name": "keyword.operator.bitwise.shift.epl"
				},
				{
					"match": "!==|!=|<=|>=|===|==|<|>",
					"name": "keyword.operator.comparison.epl"
				},
				{
					"match": "&&|!!|!|\\|\\|",
					"name": "keyword.operator.logical.epl"
				},
				{
					"match": "&|\\||\\^|~",
					"name": "keyword.operator.bitwise.epl"
				},
				{
					"match": "=|:",
					"name": "keyword.operator.assignment.epl"
				},
				{
					"match": "--",
					"name": "keyword.operator.decrement.epl"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.epl"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.epl"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.epl"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.epl"
						}
					},
					"name": "string.quoted.single.epl",
					"patterns": [
						{
							"include": "#string_escapes"
						},
						{
							"match": "[^']*[^\\n\\r'\\\\]$",
							"name": "invalid.illegal.string.epl"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.epl"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.epl"
						}
					},
					"name": "string.quoted.double.epl",
					"patterns": [
						{
							"include": "#string_escapes"
						},
						{
							"match": "[^\"]*[^\\n\\r\"\\\\]$",
							"name": "invalid.illegal.string.epl"
						}
					]
				},
				{
					"begin": "((\\w+)?(html|HTML|Html))\\s*(`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.epl"
						},
						"4": {
							"name": "punctuation.definition.string.begin.epl"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.epl"
						}
					},
					"name": "string.quoted.template.html.epl",
					"patterns": [
						{
							"include": "#string_escapes"
						},
						{
							"include": "#interpolated_js"
						},
						{
							"include": "text.html.basic"
						}
					]
				},
				{
					"begin": "(?<=innerHTML)\\s*(\\+?=)\\s*(?=`)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.epl"
						}
					},
					"end": "(?<=`)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.epl"
						}
					},
					"contentName": "string.quoted.template.html.epl",
					"patterns": [
						{
							"begin": "`",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.string.begin.epl"
								}
							},
							"end": "`",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.string.end.epl"
								}
							},
							"patterns": [
								{
									"include": "#string_escapes"
								},
								{
									"include": "#interpolated_js"
								},
								{
									"include": "text.html.basic"
								}
							]
						}
					]
				},
				{
					"begin": "(Relay\\.QL)\\s*(`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.epl"
						},
						"2": {
							"name": "punctuation.definition.string.begin.epl"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.epl"
						}
					},
					"name": "string.quoted.template.graphql.epl",
					"patterns": [
						{
							"include": "#string_escapes"
						},
						{
							"include": "#interpolated_js"
						},
						{
							"include": "source.graphql"
						}
					]
				},
				{
					"begin": "(sql|SQL|Sql)\\s*(`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.epl"
						},
						"2": {
							"name": "punctuation.definition.string.begin.epl"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.epl"
						}
					},
					"name": "string.quoted.template.sql.epl",
					"patterns": [
						{
							"include": "#string_escapes"
						},
						{
							"include": "#interpolated_js"
						},
						{
							"include": "source.sql"
						}
					]
				},
				{
					"begin": "`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.epl"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.epl"
						}
					},
					"name": "string.quoted.template.epl",
					"patterns": [
						{
							"include": "#string_escapes"
						},
						{
							"include": "#interpolated_js"
						}
					]
				}
			]
		},
		"string_escapes": {
			"patterns": [
				{
					"match": "\\\\u(?![A-Fa-f0-9]{4}|{[A-Fa-f0-9]+})[^'\"]*",
					"name": "invalid.illegal.unicode-escape.epl"
				},
				{
					"match": "\\\\u(?:[A-Fa-f0-9]{4}|({)([A-Fa-f0-9]+)(}))",
					"name": "constant.character.escape.epl",
					"captures": {
						"1": {
							"name": "punctuation.definition.unicode-escape.begin.bracket.curly.epl"
						},
						"2": {
							"patterns": [
								{
									"match": "[A-Fa-f\\d]{7,}|(?!10)[A-Fa-f\\d]{6}",
									"name": "invalid.illegal.unicode-escape.epl"
								}
							]
						},
						"3": {
							"name": "punctuation.definition.unicode-escape.end.bracket.curly.epl"
						}
					}
				},
				{
					"match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
					"name": "constant.character.escape.epl"
				}
			]
		},
		"function_params": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.begin.bracket.round.epl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.bracket.round.epl"
						}
					},
					"name": "meta.parameters.epl",
					"patterns": [
						{
							"match": "(\\.\\.\\.)([a-zA-Z_$][\\w$]*)",
							"captures": {
								"1": {
									"name": "keyword.operator.spread.epl"
								},
								"2": {
									"name": "variable.parameter.rest.function.epl"
								}
							}
						},
						{
							"include": "$self"
						},
						{
							"match": "[a-zA-Z_$][\\w$]*",
							"name": "variable.parameter.function.epl"
						}
					]
				}
			]
		},
		"function_body": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.function.body.begin.bracket.curly.epl"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.function.body.end.bracket.curly.epl"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"function_innards": {
			"patterns": [
				{
					"match": "(?:\\b(async)\\b\\s*)?\\b(function)\\b(?:\\s*(\\*))?",
					"captures": {
						"1": {
							"name": "storage.modifier.async.epl"
						},
						"2": {
							"name": "storage.type.function.epl"
						},
						"3": {
							"name": "storage.modifier.generator.epl"
						}
					}
				},
				{
					"match": "[a-zA-Z_$][\\w$]*(?=\\s*\\()",
					"name": "entity.name.function.epl"
				},
				{
					"include": "#function_params"
				},
				{
					"include": "#comments"
				}
			]
		},
		"arrow_function_innards": {
			"patterns": [
				{
					"match": "=>",
					"name": "storage.type.function.arrow.epl"
				},
				{
					"include": "#function_params"
				},
				{
					"match": "([a-zA-Z_$][\\w$]*)(?=\\s*=>)",
					"captures": {
						"0": {
							"name": "meta.parameters.epl"
						},
						"1": {
							"name": "variable.parameter.function.epl"
						}
					}
				},
				{
					"match": "(\\d[\\w$]*)",
					"captures": {
						"0": {
							"name": "meta.parameters.epl"
						},
						"1": {
							"name": "invalid.illegal.identifier.epl"
						}
					}
				}
			]
		},
		"arguments": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.begin.bracket.round.epl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.bracket.round.epl"
						}
					},
					"name": "meta.arguments.epl",
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"method_calls": {
			"patterns": [
				{
					"begin": "(\\.)\\s*([\\w$]+)\\s*(?=\\()",
					"beginCaptures": {
						"1": {
							"name": "meta.delimiter.method.period.epl"
						},
						"2": {
							"patterns": [
								{
									"match": "(?x)\n\\bon(Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\nReadystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\nBefore(cut|deactivate|unload|update|paste|print|editfocus|activate)|\nBlur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\nChange|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\nDatasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\nDragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\nErrorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\\b",
									"name": "support.function.event-handler.epl"
								},
								{
									"match": "(?x)\n\\b(shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\nscrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\nsup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|\nMonth|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\nTime|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\nsavePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\ncontextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\ncreateEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\ntest|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\nuntaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|stringify|\nprint|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\nfileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\nforward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\nabort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\nreleaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\nTime|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\nAttention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\nmoveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\\b",
									"name": "support.function.epl"
								},
								{
									"match": "(?x)\n\\b(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\nappendChild|appendData|before|blur|canPlayType|captureStream|\ncaretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\ncloneContents|cloneNode|cloneRange|close|closest|collapse|\ncompareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\nconvertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\ncreateAttributeNS|createCaption|createCDATASection|createComment|\ncreateContextualFragment|createDocument|createDocumentFragment|\ncreateDocumentType|createElement|createElementNS|createEntityReference|\ncreateEvent|createExpression|createHTMLDocument|createNodeIterator|\ncreateNSResolver|createProcessingInstruction|createRange|createShadowRoot|\ncreateTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\ndeleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\ndeleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\nenableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\nexitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\ngetAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\ngetAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\ngetClientRects|getContext|getDestinationInsertionPoints|getElementById|\ngetElementsByClassName|getElementsByName|getElementsByTagName|\ngetElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\ngetVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\nhasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\ninsertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\ninsertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\nisPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\nlookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\nmoveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\nparentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\npreviousSibling|probablySupportsContext|queryCommandEnabled|\nqueryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\nquerySelector|querySelectorAll|registerContentHandler|registerElement|\nregisterProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\nremoveAttributeNode|removeAttributeNS|removeChild|removeEventListener|\nremoveItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\nrequestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\nscrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\nsetAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\nsetCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\nsetRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\nslice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\nsubmit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\ntoDataURL|toggle|toString|values|write|writeln)\\b",
									"name": "support.function.dom.epl"
								},
								{
									"match": "[a-zA-Z_$][\\w$]*",
									"name": "entity.name.function.epl"
								},
								{
									"match": "\\d[\\w$]*",
									"name": "invalid.illegal.identifier.epl"
								}
							]
						}
					},
					"end": "(?<=\\))",
					"name": "meta.method-call.epl",
					"patterns": [
						{
							"include": "#arguments"
						}
					]
				}
			]
		},
		"function_calls": {
			"patterns": [
				{
					"begin": "([\\w$]+)\\s*(?=\\()",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"match": "(?x)\n\\b(isNaN|isFinite|eval|uneval|parseInt|parseFloat|decodeURI|\ndecodeURIComponent|encodeURI|encodeURIComponent|escape|unescape|\nrequire|set(Interval|Timeout)|clear(Interval|Timeout))\\b",
									"name": "support.function.epl"
								},
								{
									"match": "[a-zA-Z_$][\\w$]*",
									"name": "entity.name.function.epl"
								},
								{
									"match": "\\d[\\w$]*",
									"name": "invalid.illegal.identifier.epl"
								}
							]
						}
					},
					"end": "(?<=\\))",
					"name": "meta.function-call.epl",
					"patterns": [
						{
							"include": "#arguments"
						}
					]
				}
			]
		},
		"objects": {
			"patterns": [
				{
					"match": "[A-Z][A-Z0-9_$]*(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)",
					"name": "constant.other.object.epl"
				},
				{
					"match": "[a-zA-Z_$][\\w$]*(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)",
					"name": "variable.other.object.epl"
				}
			]
		},
		"properties": {
			"patterns": [
				{
					"match": "(\\.)\\s*([A-Z][A-Z0-9_$]*\\b\\$*)(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)",
					"captures": {
						"1": {
							"name": "meta.delimiter.property.period.epl"
						},
						"2": {
							"name": "constant.other.object.property.epl"
						}
					}
				},
				{
					"match": "(\\.)\\s*(\\$*[a-zA-Z_$][\\w$]*)(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)",
					"captures": {
						"1": {
							"name": "meta.delimiter.property.period.epl"
						},
						"2": {
							"name": "variable.other.object.property.epl"
						}
					}
				},
				{
					"match": "(\\.)\\s*([A-Z][A-Z0-9_$]*\\b\\$*)",
					"captures": {
						"1": {
							"name": "meta.delimiter.property.period.epl"
						},
						"2": {
							"name": "constant.other.property.epl"
						}
					}
				},
				{
					"match": "(\\.)\\s*(\\$*[a-zA-Z_$][\\w$]*)",
					"captures": {
						"1": {
							"name": "meta.delimiter.property.period.epl"
						},
						"2": {
							"name": "variable.other.property.epl"
						}
					}
				},
				{
					"match": "(\\.)\\s*([0-9][\\w$]*)",
					"captures": {
						"1": {
							"name": "meta.delimiter.property.period.epl"
						},
						"2": {
							"name": "invalid.illegal.identifier.epl"
						}
					}
				}
			]
		},
		"interpolated_js": {
			"patterns": [
				{
					"begin": "\\${",
					"captures": {
						"0": {
							"name": "punctuation.section.embedded.epl"
						}
					},
					"end": "}",
					"name": "source.epl.embedded.source",
					"patterns": [
						{
							"begin": "{",
							"beginCaptures": {
								"0": {
									"name": "meta.brace.curly.epl"
								}
							},
							"end": "}",
							"endCaptures": {
								"0": {
									"name": "meta.brace.curly.epl"
								}
							},
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.begin.epl"
						},
						"2": {
							"name": "punctuation.definition.comment.end.epl"
						}
					},
					"match": "(/\\*)(\\*/)",
					"name": "comment.block.empty.epl"
				},
				{
					"begin": "/\\*\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.epl"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.epl"
						}
					},
					"name": "comment.block.documentation.epl",
					"patterns": [
						{
							"include": "source.epldoc"
						}
					]
				},
				{
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.epl"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.epl"
						}
					},
					"name": "comment.block.epl"
				},
				{
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.epl"
						}
					},
					"end": "$",
					"name": "comment.line.double-slash.epl"
				}
			]
		},
		"switch_statement": {
			"patterns": [
				{
					"begin": "\\bswitch\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.switch.epl"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.section.switch-block.end.bracket.curly.epl"
						}
					},
					"name": "meta.switch-statement.epl",
					"patterns": [
						{
							"begin": "\\(",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.switch-expression.begin.bracket.round.epl"
								}
							},
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.switch-expression.end.bracket.round.epl"
								}
							},
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						{
							"begin": "{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.section.switch-block.begin.bracket.curly.epl"
								}
							},
							"end": "(?=})",
							"patterns": [
								{
									"begin": "\\bcase\\b",
									"beginCaptures": {
										"0": {
											"name": "keyword.control.case.epl"
										}
									},
									"end": ":",
									"endCaptures": {
										"0": {
											"name": "punctuation.definition.section.case-statement.epl"
										}
									},
									"patterns": [
										{
											"include": "#prevent_object_keys_matching"
										},
										{
											"include": "$self"
										}
									]
								},
								{
									"match": "(?:^\\s*)?\\b(default)\\b\\s*(:)",
									"captures": {
										"1": {
											"name": "keyword.control.default.epl"
										},
										"2": {
											"name": "punctuation.definition.section.case-statement.epl"
										}
									}
								},
								{
									"include": "$self"
								}
							]
						}
					]
				}
			]
		},
		"prevent_object_keys_matching": {
			"patterns": [
				{
					"match": "(\\w+)(?=\\s*:)",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				}
			]
		}
	},
	"version": "https://github.com/atom/language-javascript/commit/0daf8d8333996374836447e17b31c637e39d8a81"
}