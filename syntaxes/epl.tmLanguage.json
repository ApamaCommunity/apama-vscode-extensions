{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "epl",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#types"
    },
    {
      "include": "#events"
    }
  ],
  "repository": {
    "types": {
      "patterns": [
        {
          "begin": "(?=\\b(i|f|b|st|a))",
          "end": "(?=\\;)",
          "patterns": [
            {
              "begin": "(integer|float|boolean|string|any)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\s*",
              "beginCaptures": {
                "1": {
                  "name": "entity.name.type.epl"
                },
                "2": {
                  "name": "variable.language.epl"
                }
              },
              "end": "(?=\\;)",
              "patterns": [
                {
                  "include": "#assignment"
                },
                {
                  "include": "#strings"
                },
                {
                  "include": "#control-keywords"
                },
                {
                  "comment": "This allows the any to be assigned to",
                  "include": "#types"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=(\\bsequence|dictionary\\b))",
          "end": "(?=\\;)",
          "patterns": [
            {
              "begin": "(sequence|dictionary)\\s*\\<",
              "beginCaptures": {
                "1": {
                  "name": "entity.name.type.epl"
                }
              },
              "end": "(?=\\>)",
              "patterns": [
                {
                  "include": "#typenames"
                },
                {
                  "include": "#comma"
                }
              ]
            },
            {
              "include": "#assignment"
            },
            {
              "include": "#control-keywords"
            },
            {
              "include": "#arrays"
            }
          ]
        }
      ]
    },
    "events": {
      "begin": "(?=\\bev)",
      "end": "\\}",
      "patterns": [
        {
          "begin": "\\b(event)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.epl"
            },
            "2": {
              "name": "variable.language.epl"
            }
          },
          "end": "\\{",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        {
          "include": "#types"
        },
        {
          "include": "#comments"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.epl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.epl",
          "match": "\\\\."
        }
      ]
    },
    "arrays": {
      "begin": "\\[",
      "end": "\\]",
      "patterns": [
        {
          "include": "#comma"
        },
        {
          "comment": "IDENTIFIER",
          "match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b",
          "name": "variable.language.epl"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "comment": "Block Comments",
          "begin": "/\\*",
          "end": "\\*/",
          "name": "comment.block.epl"
        },
        {
          "comment": "Comment lines",
          "match": "(//.*)",
          "name": "comment.line.epl"
        }
      ]
    },
    "typenames": {
      "patterns": [
        {
          "comment": "for parameters and templates",
          "match": "\\b(integer|string|boolean|float|any|dictionary|sequence|context|channel)",
          "name": "storage.type.epl"
        }
      ]
    },
    "control-keywords": {
      "patterns": [
        {
          "comment": "Control keywords",
          "match": "(\\b(die|as|spawn|return|for|new|at|if|else|then|not|log|self|and|or|on|all|in|route|emit|enqueue|send)\\b)",
          "name": "keyword.control.epl"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "comment": "Constants in EPL",
          "match": "\\b(true|false|constant)\\b",
          "name": "constant.language.epl"
        }
      ]
    },
    "logging": {
      "patterns": [
        {
          "comment": "Logging and numeric constants",
          "match": "\\b(\\d+|DEBUG|WARN|INFO|ERROR|CRIT)\\b",
          "name": "constant.language.epl"
        }
      ]
    },
    "comma": {
      "patterns": [
        {
          "comment": "comma symbol",
          "match": "(\\,)",
          "name": "keyword.operator"
        }
      ]
    },
    "assignment": {
      "patterns": [
        {
          "comment": ":= assignment symbol",
          "match": "(\\:\\=)",
          "name": "keyword.operator"
        }
      ]
    }
  },
  "scopeName": "source.epl"
}
